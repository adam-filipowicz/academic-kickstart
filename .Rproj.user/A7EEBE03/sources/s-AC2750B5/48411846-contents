---
title: Color
author: Adam Filipowicz
date: '2020-04-15'
slug: color
categories: []
tags:
  - Data Visualization
summary: 'In this lab, we play around with color, and at the end I take a look at some prison incarceration data for Oregon.'
authors: []
external_link: ''
image:
  placement: 1
  caption: ''
  focal_point: 'Smart'
  preview_only: no
url_code: ''
url_pdf: ''
url_slides: ''
url_video: ''
slides: ''
output:
  html_document:
    theme: flatly
    toc: TRUE
    toc_float: TRUE
    toc_depth: 2
    number_sections: TRUE
    code_folding: hide
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

# Libraries

```{r}
library(tidyverse)
library(readr)
library(wordbankr)
library(here)
library(RColorBrewer)
library(wesanderson)
library(ggthemes)
library(beyonce)
library(viridis)
library(forcats)
library(colorblindr)
library(ggrepel)
library(extrafont)
```

# Reading the data

```{r}
sounds <- read_csv("http://bit.ly/cs631-meow")
```

# Know your data! (Challenge #1)

## How many variables?

```{r}
glimpse(sounds)
```

7 variables in this dataset: age, sound, kids_produce, kids_respond, prop_produce, and prop_understand

### Which are continuous

kids_produce, kids_respond, prop_produce, kids_understand, and prop_understand are continuous variables

### Which are categorical and ordinal?

Sound is a categorical variable with 3 possible values:

```{r}
sounds %>% 
  distinct(sound) %>% 
  knitr::kable()
```

Age is an ordinal variable since it can only take on a limited set of values:

```{r}
sounds %>% 
  distinct(age) %>% 
  pull
```

Since there are 11 "categories", however, it makes more sense to treat this as a continuous variable for plotting.

## How many _total_ kids?

```{r}
sum(sounds$kids_respond)
```

Looks like 7226 kids are represented in this dataset based on the number of parents who responded to the questions.

## How many different ages?

Based on the code above, 11 different ages are represented here, 8-18 months old.

### How many kids per age?

Let's produce a table and a graph to answer this:

```{r}
sounds %>% 
  group_by(age) %>% 
  summarize(total_respond = sum(kids_respond)) %>% 
  knitr::kable()
```

```{r}
ggplot(sounds, aes(x = age, y = kids_respond)) +
  geom_col() +
  labs(x = "Age (mos)", y = "Total Children")
```


## How many types of animal sounds, and what are they?

The first table above showed that there are 3 unique animal sounds being analyzed here: "cockadoodledoo", "meow", and "woof woof".

# Initial EDA Plots

## How many kids produce each kind of sound?

Alright, let's produce a table and graph to explore this:

```{r}
sounds %>% 
  group_by(sound) %>% 
  summarize(total_produce = sum(kids_produce)) %>% 
  knitr::kable()
```

```{r}
ggplot(sounds, aes(x = sound, y = kids_produce)) +
  geom_col() +
  labs(x = "Sound", y = "Total Children Producing")
```

## Adding age

We'll have to change the x-axis to age and facet_wrap by sound to answer this. Let's look at the proportion instead of raw counts, too:

### Bar chart

```{r}
ggplot(sounds, aes(x = age, y = prop_produce)) +
  geom_col() +
  labs(x = "Age (mos)", y = "Proportion of Children Producing") + 
  facet_wrap(~sound)
```

### Scatter plot

```{r}
ggplot(sounds, aes(x = age, y = prop_produce)) +
  geom_point() +
  labs(x = "Age (mos)", y = "Proportion of Children Producing") + 
  facet_wrap(~sound)
```

# Discrete colors

Instead of using facetting, we could use color to distinguish between each of the sounds.

## Initial (uncolored) plot

```{r}
ggplot(sounds, aes(x = age, y = prop_produce)) +
  geom_point() +
  labs(x = "Age (months)", y = "Proportion of Children Producing")
```

## Default discrete palette (Challenge #2)

Alright, let's add some color:

```{r}
ggplot(sounds, aes(x = age, y = prop_produce)) +
  geom_point(aes(color = sound)) +
  labs(x = "Age (months)", y = "Proportion of Children Producing")
```

## Adding lines (Challenge #3)

What if we wanted to add lines connecting the points for each group?

```{r}
ggplot(sounds, aes(x = age, y = prop_produce)) +
  geom_line(aes(color = sound)) +
  geom_point(aes(color = sound)) +
  labs(x = "Age (months)", y = "Proportion of Children Producing")
```

## Challenge #4

In the challenge above we colored the lines and points separately, but we could do it all upfront.

### Coloring both lines and points

```{r}
ggplot(sounds, aes(x = age, y = prop_produce, color = sound)) +
  geom_line() +
  geom_point() +
  labs(x = "Age (months)", y = "Proportion of Children Producing")
```

### Using `geom_smooth()`

Let's instead add a loess line using geom_smooth, getting rid of the grey standard error ribbon and decreasing the line width:

```{r}
ggplot(sounds, aes(x = age, y = prop_produce, color = sound)) + 
  geom_smooth(se = FALSE, lwd = .5) +
  geom_point() +
  labs(x = "Age (months)", y = "Proportion of Children Producing")
```


## Controlling factor order

Alright, let's use the forcats package to change the order of the legend so it matches the lines. We'll have to turn the sound category in our dataset into a factor first. We're going to save the new plot as sound_traj:

```{r}
sounds <- sounds %>% 
  mutate(sound = as.factor(sound))

sound_traj <- ggplot(sounds, aes(x = age, y = prop_produce, color = fct_reorder2(sound, age, prop_produce))) +
  geom_smooth(se = FALSE, lwd = .5) +
  geom_point() +
  labs(x = "Age (months)", y = "Proportion of Children Producing", color = "sound")
sound_traj
```


## Modifying default colors

Experiment with each property in `scale_color_hue()` to get a sense of what it does.

Let's start with "h" the hue:

```{r}
sound_traj +
  scale_color_hue(h = c(0,180))
```


And then "l" the luminance:

```{r}
sound_traj +
  scale_color_hue(l = 10)
```


And finally "c" the chroma or intensity of color:

```{r}
sound_traj +
  scale_color_hue(c = 40)
```


## Setting discrete colors

Experiment with `scale_color_manual()` and some of the various [named colors](http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf) that come built-in to R!

Let's try a few different combinations:

```{r}
sound_traj +
  scale_color_manual(values = c("darkorchid", "darkslategray", "goldenrod"))
```


```{r}
sound_traj +
  scale_color_manual(values = c("maroon", "mediumaquamarine", "sienna"))
```


```{r}
sound_traj +
  scale_color_manual(values = c("violetred1", "thistle2", "wheat3"))
```


### Challenge #5

Why doesn't the code block change the colors?

```{r}
ggplot(sounds, aes(x = age, 
                         y = prop_produce, 
                         color = fct_reorder2(sound, age, prop_produce))) + 
  geom_smooth(se = FALSE, lwd = .5) +
  geom_point(size = 2) +
  labs(x = "Age (months)", 
       y = "Proportion of Children Producing", 
       color = "sound") +
  scale_fill_manual(values = c("cornflowerblue", 
                               "seagreen", "coral"))
```

```{r}
ggplot(sounds, aes(x = age, 
                         y = prop_produce, 
                         fill = fct_reorder2(sound, age, prop_produce))) + 
  geom_smooth(se = FALSE, lwd = .5) +
  geom_point(size = 2) +
  labs(x = "Age (months)", 
       y = "Proportion of Children Producing", 
       fill = "sound") +
  scale_fill_manual(values = c("cornflowerblue", 
                               "seagreen", "coral"))
```


In the first code block, in the global aesthetics we set the color aesthetic to the sound variable, but then we tried to change it using scale_fill_manual and not scale_color_manual.

In the second code block, the fill aesthetic was set to the sound variable, but geom_line doesn't have a fill aesthetic, only a color aesthetic. And the default points used by geom_point don't have a fill aesthetic either.

### Challenge #6

```{r}
sound_outlines <- ggplot(sounds, aes(x = age, y = prop_produce, fill = fct_reorder2(sound, age, prop_produce))) +
  geom_smooth(aes(color = fct_reorder2(sound, age, prop_produce)), se = FALSE, lwd = .5, show.legend = FALSE) +
  geom_point(shape = 21) +
  labs(x = "Age (months)", y = "Proportion of Children Producing", fill = "sound")
sound_outlines
```


```{r}
my_colors <- c("skyblue3", "midnightblue", "darkolivegreen4")
sound_outlines +
  scale_fill_manual(values = my_colors) +
  scale_color_manual(values = my_colors)
```


### Challenge #7

```{r}
hex_colors <- c("#a6cee3", "#1f78b4", "#b2df8a")
sound_traj +
  scale_color_manual(values = hex_colors)
```

## Built-in descrete color palettes

### Using `scale_color_brewer()`

Using built-in discrete palettes is pretty simple. First, using color brewer:

```{r}
sound_traj +
  scale_color_brewer(palette = "Dark2")
```


### Using `wesanderson`

And now the Wes Anderson palettes:

```{r}
sound_traj +
  scale_color_manual(values = wes_palette("Darjeeling1"))
```

```{r}
sound_traj +
  scale_color_manual(values = wes_palette("Moonrise2"))
```


#### Challenge #8

Let's use the `Rushmore1` palette:

```{r}
wes_palette("Rushmore1")
```

And picking the last three colors for our plot:

```{r}
sound_traj +
  scale_color_manual(values = wes_palette("Rushmore1")[3:5])
```

Picking colors 2, 3, and 5 instead:

```{r}
sound_traj +
  scale_color_manual(values = wes_palette("Rushmore1")[c(2, 3, 5)])
```


### Using `ggthemes`

Let's explore some of the palettes in `ggthemes`:

```{r}
sound_traj +
  scale_color_fivethirtyeight()
```

```{r}
sound_traj +
  scale_color_economist()
```


### Using `beyonce`

Beyonce palettes?? Sure, why not:

```{r}
beyonce_palette(18)
sound_traj +
  scale_color_manual(values = beyonce_palette(18)[3:5])
```


### Using `viridis`

These palettes were designed to "make plots that are pretty, better represent your data, easier to read by those with colorblindness, and print well in grey scale." Let's try them out:

```{r}
sound_traj +
  scale_color_viridis(discrete = TRUE) +
  theme_minimal()
```

Using the plasma scale instead:

```{r}
sound_traj +
  scale_color_viridis(discrete = TRUE, option = "plasma") +
  theme_minimal()
```


#### Challenge #9

Coloring points and lines by `sound`, the outline `midnightblue` and playing with `theme_bw` and `theme_minimal` (I like `theme_minimal` personally):
```{r}
ggplot(sounds, aes(x = age, y = prop_produce, fill = fct_reorder2(sound, age, prop_produce))) +
  geom_smooth(aes(color = fct_reorder2(sound, age, prop_produce)), se = FALSE, lwd = .5, show.legend = FALSE) +
  geom_point(size = 2, shape = 21, color = "midnightblue") +
  labs(x = "Age (months)", y = "Proportion of Children Producing", fill = "sound") +
  scale_fill_viridis(discrete = TRUE) +
  scale_color_viridis(discrete = TRUE) +
  theme_minimal()
```

```{r}
ggplot(sounds, aes(x = age, y = prop_produce, fill = fct_reorder2(sound, age, prop_produce))) +
  geom_smooth(aes(color = fct_reorder2(sound, age, prop_produce)), se = FALSE, lwd = .5, show.legend = FALSE) +
  geom_point(size = 2, shape = 21, color = "midnightblue") +
  labs(x = "Age (months)", y = "Proportion of Children Producing", fill = "sound") +
  scale_fill_viridis(discrete = TRUE) +
  scale_color_viridis(discrete = TRUE) +
  theme_bw()
```


## Greyscale

Experimenting with `scale_color_grey()`/`scale_fill_grey()`

```{r}
sound_traj +
  scale_color_grey() +
  theme_minimal()
```

Setting the start and end:

```{r}
sound_traj +
  scale_color_grey(start = 0.2, end = .8)
```

Points outlined in black:

```{r}
ggplot(sounds, aes(x = age, y = prop_produce, fill = fct_reorder2(sound, age, prop_produce))) +
  geom_smooth(aes(color = fct_reorder2(sound, age, prop_produce)), se = FALSE, lwd = .5, show.legend = FALSE) +
  geom_point(size = 2, shape = 21) +
  labs(x = "Age (months)", y = "Proportion of Children Producing", fill = "sound") +
  scale_fill_grey(start = 0.3, end = 1) +
  scale_color_grey(start = 0.3, end = 1)
```

Let's set the line type by `sound`:

```{r}
ggplot(sounds, aes(x = age, 
                   y = prop_produce, 
                   fill = fct_reorder2(sound, age, prop_produce))) + 
  geom_smooth(aes(lty = fct_reorder2(sound, age, prop_produce)), color = "black",
              se = FALSE, lwd = .5, show.legend = FALSE) +
  geom_point(size = 2, shape = 21) +
  labs(x = "Age (months)", 
       y = "Proportion of Children Producing", 
       fill = "sound") +
  scale_fill_grey(start = 0.3, end = 1) 
```

And changing the color and type by `sound`:

```{r}
ggplot(sounds, aes(x = age, 
                   y = prop_produce, 
                   fill = fct_reorder2(sound, age, prop_produce))) + 
  geom_smooth(aes(color = fct_reorder2(sound, age, prop_produce),
                  lty = fct_reorder2(sound, age, prop_produce)),
              se = FALSE, lwd = .5, show.legend = FALSE) +
  geom_point(size = 2, shape = 21) +
  labs(x = "Age (months)", 
       y = "Proportion of Children Producing", 
       fill = "sound") +
  scale_fill_grey(start = 0.3, end = .8) +
  scale_color_grey(start = 0.3, end = .8) 
```


## Using `colorblindr`

Let's use the `colorblindr` package to simulate colorblindness in our figures. We'll save a ggplot object and then pass it into `cvd_grid`.

```{r}
my_sound_traj <- sound_traj +
  scale_color_manual(values = beyonce_palette(18)[c(1, 4, 5)])
cvd_grid(my_sound_traj)
```

We can also use the colorblind-friendly palette `scale_color_OkabeIto`:

```{r}
cb_sound_traj <- sound_traj +
  scale_color_OkabeIto()

cb_sound_traj
```

```{r}
cvd_grid(cb_sound_traj)
```

Using the colors without the `colorblindr` package:

```{r}
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")

# To use for line and point colors, add
sound_traj +
  scale_colour_manual(values = cbbPalette[c(3, 7, 8)])
```


## Repel labels

We can put the labels right on the plot instead of in the legend using `ggrepel`:

```{r}
sounds <- sounds %>% 
  mutate(label = case_when(
    age == max(age) ~ sound))

ggplot(sounds, aes(x = age,
                   y = prop_produce,
                   color = fct_reorder2(sound, age, prop_produce))) +
  geom_smooth(se = FALSE, lwd = .5) +
  geom_point(size =2) +
  labs(x = "Age (months)",
       y = "Proportion of Children Producing") +
  geom_text_repel(aes(label = label),
                  nudge_x =1,
                  direction = "y",
                  na.rm = TRUE) +
  guides(color = FALSE)
```


# Continuous Colors

Experiment a bit with `scale_color_gradient()`/`scale_fill_gradient()`!

This is going to look bad, but let's make the colors change based on age as a continuous variable:

```{r}
sound_by_age <- ggplot(sounds, aes(x = age, 
                                   y = prop_produce, 
                                   color = age)) +
  geom_line(aes(group = sound), lwd = .5) +
  geom_point(size = 2) +
  labs(x = "Age (months)", 
       y = "Proportion of Children Producing")
sound_by_age
```


```{r}
sound_by_age +
  scale_color_gradient(trans = "reverse")
```

Changing the colors of the gradient

```{r}
sound_by_age +
  scale_color_gradient(low = "white", high = "red")
```

Greyscale gradient:

```{r}
sound_by_age +
  scale_color_gradient(low = "grey90", high = "black")
```

We can use `scale_color_gradient2` to create a divergent color scheme:

```{r}
med_age <- sounds %>% 
  summarise(mos = median(age)) %>% 
  pull()
sound_by_age +
  scale_color_gradient2(midpoint = med_age,
                        low = "blue", mid = "white", high = "red")
```


## Built-in continuous palettes

Experiment a bit with `RColorBrewer` and `viridis`

```{r}
sound_by_age +
  scale_color_gradientn(colors = brewer.pal(n=5, name="PuBuGn"))
```

Reversing the colors:

```{r}
sound_by_age +
  scale_color_gradientn(colors = rev(brewer.pal(n=5, name="PuBuGn")))
```

Using the `viridis` package:

```{r}
sound_by_age +
  scale_color_viridis()
```

Changing the colors to "magma":

```{r}
sound_by_age +
  scale_color_viridis(option = "magma")
```

And using the "inferno" palette in reverse:

```{r}
sound_by_age +
  scale_color_viridis(option = "inferno", begin = 1, end = 0)
```


# Challenge #10

For this challenge, I want to take a look at some incarceration data and make a choropleth map for Oregon counties. To do this, I'll be using a dataset from the [Vera Institute](http://trends.vera.org/incarceration-rates?data=pretrial) and a package called `urbnmapr`.

## Version with _good_ color

First, we'll need to install the `urbnmapr` package.
```{r}
devtools::install_github("UrbanInstitute/urbnmapr")
```

And then install the library:
```{r}
library(urbnmapr)
```

We'll also have to read in our incarceration data:

```{r}
incarceration <- read_csv("incarceration_trends.csv")
```

To match the incarceration data to the map correctly, we'll merge two dataframes: the incarceration one we just loaded in and the "counties" dataframe. We'll combine them using the "county_fips" column which contains a unique ID for each county in the US. We'll also select just the "county_fips" and "total_prison_pop_rate" for the year 2014 from our incarceration dataframe, as that is what we'll be mapping.

```{r}
incarceration_county <- incarceration %>% filter(year == "2014") %>% select(fips, total_prison_pop_rate) %>% rename(county_fips = fips)
incarceration_county <- left_join(incarceration_county, counties, by = "county_fips")
```

Next, we'll make the map, using `theme_void` and changing lots of elements:

```{r}
incarceration_county %>% 
  filter(state_name == "Oregon") %>% 
  ggplot(mapping = aes(long, lat, group = group, fill = total_prison_pop_rate)) +
  geom_polygon(color = "#ffffff", size = .25) +
  scale_fill_gradientn(colors = brewer.pal(n=5, name = "OrRd")) +
  coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
  labs(fill = "Rate", title = "Oregon Prison Incarceration Rate 2014", subtitle = "Per 100,00 residents age 15-64", caption = "Source: Vera Institute") +
  theme_void() +
  theme(plot.title = element_text(hjust = 0.5, family = "Lato", face = "bold"),
        plot.subtitle = element_text(color = "grey50", size = 8, hjust = 0.5, family = "Lato", face = "bold.italic"),
        plot.caption = element_text(family = "Lato"),
        legend.title = element_text(family = "Lato"))
```


I've chosen to use the ColorBrewer palette "OrRd" as it built to be useful for cartography data like this and is colorblind and photocopy safe. There is one county that does not have any data for 2014, and so that is colored grey by default, which I think works fine. The orange-red palette makes the counties with especially high rates of incarceration stand out as a dark red, while the lower rates are very light. I think these choropleth maps are perfect for showing how a quantity, prison incarceration rate in this case, changes across locations.

How does this look for colorblind folks?

```{r}
cb_incarceration <- incarceration_county %>% 
  filter(state_name == "Oregon") %>% 
  ggplot(mapping = aes(long, lat, group = group, fill = total_prison_pop_rate)) +
  geom_polygon(color = "#ffffff", size = .25) +
  scale_fill_gradientn(colors = brewer.pal(n=5, name = "OrRd")) +
  coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
  labs(fill = "Rate", title = "Oregon Prison Incarceration Rate 2014", subtitle = "Per 100,00 residents age 15-64", caption = "Source: Vera Institute") +
  theme_void() +
  theme(plot.title = element_text(hjust = 0.5, face = "bold"),
        plot.subtitle = element_text(color = "grey50", size = 8, hjust = 0.5, face = "bold.italic"))
cvd_grid(cb_incarceration)
```

Although the colors look completely different here, the counties with high rates still stand out, even in the desatured version. One concern with the desaturated version is that the county with no data is no longer visible. Let's fix that with a label in the greyscale version.

## Version with greyscale

```{r}
incarceration_county %>% 
  filter(state_name == "Oregon") %>% 
  ggplot(mapping = aes(long, lat, group = group, fill = total_prison_pop_rate)) +
  geom_polygon(color = "#ffffff", size = .25) +
  scale_fill_gradientn(colors = brewer.pal(n = 5, name = "Greys"), na.value = "grey100") +
  coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
  labs(fill = "Rate", title = "Oregon Prison Incarceration Rate 2014", subtitle = "Per 100,00 residents age 15-64", caption = "Source: Vera Institute") +
  annotate(x = -120.05, y = 44.78, geom = "text",
           label = "No \ndata", family = "Lato") +
  theme_void() +
  theme(plot.title = element_text(hjust = 0.5, family = "Lato", face = "bold"),
        plot.subtitle = element_text(color = "grey50", size = 8, hjust = 0.5, family = "Lato", face = "bold.italic"),
        plot.caption = element_text(family = "Lato"),
        legend.title = element_text(family = "Lato"))
```

Not perfect, but I think it gets the point across.

## Version with _dreadful_ color

Alright, let's use a color scale that makes no sense for this data:

```{r}
incarceration_county %>% 
  filter(state_name == "Oregon") %>% 
  ggplot(mapping = aes(long, lat, group = group, fill = total_prison_pop_rate)) +
  geom_polygon(color = "#ffffff", size = .25) +
  scale_fill_gradientn(colors = brewer.pal(n=5, name = "PuOr")) +
  coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
  labs(fill = "Rate", title = "Oregon Prison Incarceration Rate 2014", subtitle = "Per 100,00 residents age 15-64", caption = "Source: Vera Institute") +
  theme_void() +
  theme(plot.title = element_text(hjust = 0.5, family = "Lato", face = "bold"),
        plot.subtitle = element_text(color = "grey50", size = 8, hjust = 0.5, family = "Lato", face = "bold.italic"),
        plot.caption = element_text(family = "Lato"),
        legend.title = element_text(family = "Lato"))
```

Using a diverging scale for this makes no sense, as there is no meaningful middlepoint for incarceration rate. This scale now highlights the lower and upper ends of the range of incarceration rates, and to me the low rates stand out even more than the high rates with their dark orange color.

Overall, this is a nice quick look at a small portion of the Incarceration Trends dataset. There are tons of interesting maps and graphs one could make from this dataset. As just one example, if I were interested in looking at how incarceration rates change over time across different states, I think using a complex cartogram, with individual plots at the location of each state depicting rates over years, would be the best way to present that data.
