---
title: Nathan's Hot Dog Eating Contest
author: Adam Filipowicz
date: '2020-04-01'
slug: hot-dog
categories: []
tags:
  - Data Visualization
summary: "My first assignment for the Data Visualization course, where we end up making a graph about the Nathan's Hot Dog Eating Contest."
authors: [Adam Filipowicz]
external_link: ''
image:
  placement: 1
  caption: ''
  focal_point: 'Smart'
  preview_only: no
url_code: ''
url_pdf: ''
url_slides: ''
url_video: ''
slides: ''
output:
  html_document:
    theme: flatly
    toc: yes
    toc_float: yes
    toc_depth: 2
    number_sections: yes
    code_folding: hide
  pdf_document:
    toc: yes
    toc_depth: '2'
---

```{r setup, include = FALSE, cache = FALSE}
knitr::opts_chunk$set(error = TRUE, comment = NA, warnings = FALSE, errors = FALSE, messages = FALSE, tidy = FALSE, cache = TRUE)
```

# Workflow for Lab 01

The lab instructions can be found [here](https://stevenbedrick.github.io/data-vis-labs-2020/01-eda_hot_dogs.html); we will work through its contents together via Webex. You will use this RMarkdown file as your workspace and final document. Don't forget to update the "author" metadata field at the top of the file!

# Start by Loading Libraries

We'll begin by loading in four libraries: tidyverse, extrafont, here, and ggthemes.

```{r}
library(tidyverse)
library(here)
library(ggthemes)
library(extrafont)
```

# Loading and wrangling data

In this section, we'll load in the data, take a quick look at it, and filter out just the data we want to go on to plot.

## Loading

_Tip_: The data files for this lab are already loaded into this project, under the `data/` directory.

Using read_csv and the here function, we can get our data in, and then use col_factor to handle the gender column.

```{r}
hot.dogs <- read_csv(here::here("hot_dog_contest.csv"),
                     col_types = cols(
                       gender = col_factor(levels = NULL)
                     ))
```

## Wrangling

Let's take a quick look at the data.

```{r}
glimpse(hot.dogs)
```
```{r}
hot.dogs
```

Looks good! We want to differentiate between years before and after the incorporation of the competitive eating league, so we'll add an indicator field to the data using mutate(). Since the data pre-1981 is a little sketchy, let's filter that out as well.

```{r}
hot.dogs <- hot.dogs %>% 
  mutate(post_ifoce = year >= 1997) %>% 
  filter(year >= 1981 & gender == "male")
hot.dogs
```

# Initial Plot

Alright, time for a first attempt at plotting the data!

```{r}
ggplot(hot.dogs, aes(x = year, y = num_eaten)) +
  geom_col()
```

Since the data is already in counted form, geom_col() works for us, not geom_bar(). Let's look at ggplot() real quick. First we called ggplot() and supplied the data we'll be looking at. aes() constructs aesthetic mappings, and in this case we gave it just the x and y values to plot. The geom_col() is a layer for ggplot, telling it to produce a bar chart.

# Axis Labels & Title

We can add in some labels using scales in ggplot. Scales control the details of how data values are translated to visual properties. Let's modify the axis labels and add a title.

```{r}
ggplot(hot.dogs, aes(x=year, y = num_eaten)) +
  geom_col() +
  labs(x = "Year", y = "Hot Dogs and Buns Consumed") +
  ggtitle("Nathan's Hot Dog Eating Contest Results, 1981-2017")
```

# Initial Colors & Styling

Alright, this graph is pretty ugly still. Let's give it a makeover, step-by-step.

## Challenge 1: 3 Different Versions

Let's outline all the columns in the plot in "white".

```{r}
ggplot(hot.dogs, aes(x = year, y = num_eaten)) +
  geom_col(color = "white") +
  labs(x = "Year", y = "Hot Dogs and Buns Consumed") +
  ggtitle("Nathan's Hot Dog Eating Contest Results, 1981-2017")
```
That's a little better! Let's change the color of the bars to "navyblue" now.

```{r}
ggplot(hot.dogs, aes(x = year, y = num_eaten)) +
  geom_col(color = "white", fill = "navyblue") +
  labs(x = "Year", y = "Hot Dogs and Buns Consumed") +
  ggtitle("Nathan's Hot Dog Eating Contest Results, 1981-2017")
```

Okay, instead of making all of the bars the same color, let's color them based on pre or post the incorporation of the competitive eating league. We'll keep default colors for now.

```{r}
ggplot(hot.dogs, aes(x = year, y = num_eaten)) +
  geom_col(aes(fill = post_ifoce), color = "white") +
  labs(x = "Year", y = "Hot Dogs and Buns Consumed") +
  ggtitle("Nathan's Hot Dog Eating Contest Results, 1981-2017")
```

## Challenge 2: Adjusting the Legend

That legend is a little ugly. Let's get rid of the legend title and relabel the colors as "Post-IFOCE" and "Pre-IFOCE"

```{r}
ggplot(hot.dogs, aes(x = year, y = num_eaten)) +
  geom_col(aes(fill = post_ifoce), color = "white") +
  labs(x = "Year", y = "Hot Dogs and Buns Consumed") +
  ggtitle("Nathan's Hot Dog Eating Contest Results, 1981-2017") +
  scale_fill_discrete(name = "",
                      labels=c("Pre-IFOCE", "Post-IFOCE"))
```

# Change the Dataset 

The above plot tells us the number of hot dogs consumed by each year's winner and is colored by whether or not the IFOCE had been created, but it doesn't tell us whether each winner was affiliated with the IFOCE. We'll need a different dataset for that.

## Challenge 3: Adding Columns, Filtering

Let's get that data in, and read affiliated and gender as factors.

```{r}
hdm.affil <- read_csv(here::here("hot_dog_contest_with_affiliation.csv"),
                      col_types = cols(
                        affiliated = col_factor(levels = NULL),
                        gender = col_factor(levels = NULL))) %>% 
  mutate(post_ifoce = year >= 1997) %>% 
  filter(year >= 1981 & gender == "male")
glimpse(hdm.affil)
```
## Challenge 4: EDA

Alright, time to explore this data a little. How many unique values are in the affiliated factor?

```{r}
hdm.affil %>% 
  distinct(affiliated)
```

Looks like three: current, former, and not affiliated. We want to count the number of rows for each unique value of affiliated and sort them in descending order.

```{r}
hdm.affil %>% 
  count(affiliated, sort = TRUE)
```

## Updated Plot

Let's plot this new data and color the bars according to the affiliated factor.

```{r}
ggplot(hdm.affil, aes(x = year, y = num_eaten)) +
  geom_col(aes(fill = affiliated)) +
  labs(x = "Year", y = "Hot Dogs and Buns Consumed") +
  ggtitle("Nathan's Hot Dog Eating Contest Results, 1981-2017")
```

## Challenge 5: Adjusting the Colors

The plot is so ugly again! Time to adjust those colors and change the legend title.

```{r}
affil.plot <- ggplot(hdm.affil, aes(x = year, y = num_eaten)) +
  geom_col(aes(fill = affiliated)) +
  labs(x = "Year", y = "Hot Dogs and Buns Consumed") +
  ggtitle("Nathan's Hot Dog Eating Contest Results, 1981-2017") +
  scale_fill_manual(values = c('#E9602B','#2277A0','#CCB683'),
                    name = "IFOCE-affiliation")
affil.plot
```

# Sweating the Details

The spacing's a little funky down near the origin of the plot. The documentation tells us that the defaults are c(0.05, 0) for continuous variables. The first number is multiplicative and the second is additive.

The default was that 1.8 ((2017-1981)*.05+0) was added to the right and left sides of the x-axis as padding, so the effective default limits were c(1979, 2019).

Let’s tighten that up with the expand property for the scale_y_continuous (we’ll also change the breaks for y-axis tick marks here) and scale_x_continuous settings:

## Initial plot

```{r}
affil.plot <- affil.plot +
  scale_y_continuous(expand = c(0,0),
                     breaks = seq(0, 70, 10)) +
  scale_x_continuous(expand = c(0,0))
affil.plot
```

## Challenge 6: Custom Axes

It's a little tight now. Let's loosen things up a bit by updating the plot coordinates.

```{r}
affil.plot <- affil.plot +
  coord_cartesian(xlim = c(1980, 2018), ylim = c(0, 80))
affil.plot
```

# Themes

Let's play around with some theme settings.

## Initial Plot

```{r}
affil.plot +
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text = element_text(size = 12)) +
  theme(panel.background = element_blank()) +
  theme(axis.line.x = element_line(color = "gray80", size =0.5)) +
  theme(axis.ticks = element_line(color = "gray80", size =0.5))
```

By default, plot titles in ggplot2 are left-aligned. For hjust:
0 == left
0.5 == centered
1 == right

## Making a Custom Theme

We could also save all these as a custom theme.
```{r}
hot_diggity <- theme(plot.title = element_text(hjust = 0.5),
                     axis.text = element_text(size = 12),
                     panel.background = element_blank(),
                     axis.line.x = element_line(color = "gray80", size = 0.5),
                     axis.ticks = element_line(color = "gray80", size = 0.5),
                     text = element_text(family = "Lato") # need extrafont for this
                     )
affil.plot + hot_diggity
```

## Applying Library Themes

We could also use someone else's theme:

```{r}
affil.plot + theme_fivethirtyeight(base_family = "Lato")
```

```{r}
affil.plot + theme_tufte(base_family = "Palatino Linotype")
```

## Custom Tick Marks & Labels

We're going to mess with the x-axis ticks and labels.

```{r}
years_to_label <- seq(from = 1981, to = 2017, by =4)
years_to_label
```

```{r}
hd.years <- hdm.affil %>% 
  distinct(year) %>% 
  mutate(year_lab = ifelse(year %in% years_to_label, year, ""))
```

```{r}
affil.plot +
  hot_diggity +
  scale_x_continuous(expand = c(0,0),
                     breaks = hd.years$year,
                     labels = hd.years$year_lab)
```

# Finalizing Our Masterpiece!

Alright, in one chunk here is the final (for now!) plot. Adding in some additional elements to show the breadth of options:

```{r}
nathan_plot <- ggplot(hdm.affil, aes(x = year, y = num_eaten)) + 
  geom_col(aes(fill = affiliated)) + 
  labs(x = "Year", y = "Hot Dogs and Buns Consumed") +
  ggtitle("Nathan's Hot Dog Eating Contest Results, 1981-2017") +
  scale_fill_manual(values = c('#E9602B','#2277A0','#CCB683'),
                    name = "IFOCE-affiliation") + 
  hot_diggity +
  scale_y_continuous(expand = c(0, 0),
                     breaks = seq(0, 70, 10)) +
  scale_x_continuous(expand = c(0, 0), 
                     breaks = hd.years$year,
                     labels = hd.years$year_lab) + 
  coord_cartesian(xlim = c(1980, 2018), ylim = c(0, 80)) 
nathan_plot
```

## Adding Custom Annotations

```{r}
nathan_ann <- nathan_plot +
  guides(fill = FALSE) +
  coord_cartesian(xlim = c(1980, 2019), ylim = c(0, 85)) +
  annotate('segment', x=1980.75, xend=2000.25, y= 30, yend=30, size=0.5, color="#CCB683")+
  annotate('segment', x=1980.75, xend=1980.75, y= 30, yend=28, size=0.5, color="#CCB683") +
  annotate('segment', x=2000.25, xend=2000.25, y= 30, yend=28, size=0.5, color="#CCB683") +
  annotate('segment', x=1990, xend=1990, y= 33, yend=30, size=0.5, color="#CCB683")
nathan_ann
```

```{r}
nathan_ann <- nathan_ann +
  annotate('text', x=1990, y=36, label="No MLE/IFOCE Affiliation", color="#CCB683", family="Lato", hjust=0.5, size = 3) +
  annotate('segment', x=2000.75, xend=2006.25, y= 58, yend=58, size=0.5, color="#2277A0") +
  annotate('segment', x=2000.75, xend=2000.75, y= 58, yend=56, size=0.5, color="#2277A0") +
  annotate('segment', x=2006.25, xend=2006.25, y= 58, yend=56, size=0.5, color="#2277A0") +
  annotate('segment', x=2003.5, xend=2003.5, y= 61, yend=58, size=0.5, color="#2277A0") +
  annotate('text', x=2003.5, y=65, label="MLE/IFOCE\nFormer Member", color="#2277A0", family="Lato", hjust=0.5, size = 3) +


  annotate('segment', x=2006.75, xend=2017.25, y= 76, yend=76, size=0.5, color="#E9602B") +
  annotate('segment', x=2006.75, xend=2006.75, y= 76, yend=74, size=0.5, color="#E9602B") +
  annotate('segment', x=2017.25, xend=2017.25, y= 76, yend=74, size=0.5, color="#E9602B") +
  annotate('segment', x=2012, xend=2012, y= 79, yend=76, size=0.5, color="#E9602B") +
  annotate('text', x=2012, y=82, label="MLE/IFOCE Current Member", color="#E9602B", family="Lato", hjust=0.5, size = 3)
nathan_ann
```

## Adding an Additional Data Layer 

Let's add in another layer of data from female contestants:

```{r}
hdm_females <- read_csv(here::here("hot_dog_contest_with_affiliation.csv"), 
    col_types = cols(
      affiliated = col_factor(levels = NULL), 
      gender = col_factor(levels = NULL)
      )) %>% 
  mutate(post_ifoce = year >= 1997) %>% 
  filter(year >= 1981 & gender == "female") 
glimpse(hdm_females)
```

```{r}
nathan_w_females <- nathan_ann +
  # add in the female data, and manually set a fill color
  geom_col(data = hdm_females, 
           width = 0.75, 
           fill = "#F68A39")
nathan_w_females
```

And a final caption:

```{r}
caption <- paste(strwrap("* From 2011 on, separate Men's and Women's prizes have been awarded. All female champions to date have been MLE/IFOCE-affiliated.", 70), collapse="\n")

nathan_w_females +
  # now an asterisk to set off the female scores, and a caption
  annotate('text', x = 2018.5, y = 39, label="*", family = "Lato", size = 8) +
  labs(caption = caption) +
  theme(plot.caption = element_text(family = "Lato", size=8, hjust=0, margin=margin(t=15)))
```


